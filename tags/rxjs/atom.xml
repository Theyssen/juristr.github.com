<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rxjs on juri.dev</title>
    <link>https://juristr.com/tags/rxjs/</link>
    <description>Recent content in Rxjs on juri.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Juri Strumpflohner - All rights reserved</copyright>
    <lastBuildDate>Thu, 21 May 2020 00:01:04 +0200</lastBuildDate>
    
	<atom:link href="https://juristr.com/tags/rxjs/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Nx Libs with Assets</title>
      <link>https://juristr.com/blog/2020/05/nx-libs-with-assets/</link>
      <pubDate>Thu, 21 May 2020 00:01:04 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2020/05/nx-libs-with-assets/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    One of the core pieces of &lt;a href=&#34;https://nx.dev&#34;&gt;Nx&lt;/a&gt; are libraries. They enable to seamlessly share functionality across various apps and other libs within the monorepository. Exporting code is easy, but how can we export things like assets?
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Debugging Angular Ivy Applications from the Devtools Console</title>
      <link>https://juristr.com/blog/2019/09/debugging-angular-ivy-console/</link>
      <pubDate>Wed, 25 Sep 2019 22:44:36 +0200</pubDate>
      
      <guid>https://juristr.com/blog/2019/09/debugging-angular-ivy-console/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    Do you remember how in AngularJS (v1.x) we could easily debug/change the state of our components from the browser&amp;rsquo;s devtools. Guess what: now with Ivy a new easy API returns that openes up a variety of new ways. Let&amp;rsquo;s see how that works.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>RxJS finalize operator to execute logic on Observable termination</title>
      <link>https://juristr.com/blog/2019/04/rxjs-finalize-operator/</link>
      <pubDate>Mon, 04 Mar 2019 10:00:00 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/04/rxjs-finalize-operator/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
    In this article we&amp;rsquo;re going to have a look at the RxJS &lt;code&gt;finalize&lt;/code&gt; operator. To have a practical use case, let&amp;rsquo;s take a look at disabling/enabling a form submit button during an HTTP request.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Guarantee Event Order with RxJS</title>
      <link>https://juristr.com/blog/2019/01/Guarantee-Event-Order-with-RxJS/</link>
      <pubDate>Wed, 16 Jan 2019 15:03:22 +0100</pubDate>
      
      <guid>https://juristr.com/blog/2019/01/Guarantee-Event-Order-with-RxJS/</guid>
      <description>&lt;div class=&#34;article-intro&#34;&gt;
  When you create dynamic UIs, you have to deal with async stuff a lot. Most often they are triggered by some user interaction. Things usually get tricky when you need to guarantee certain operations are executed in order. Since they are async we might not know which one returns first. Let&#39;s see how RxJS can help a lot here.
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Simple State Management with RxJS’s scan operator</title>
      <link>https://juristr.com/blog/2018/10/simple-state-management-with-scan/</link>
      <pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://juristr.com/blog/2018/10/simple-state-management-with-scan/</guid>
      <description>State management is a big topic currently in frontend development. For a reason: frontend frameworks/libraries got extremely powerful in the recent years, which led to more and more complex applications which need to be tamed.</description>
    </item>
    
    <item>
      <title>My Journey replacing Promises with RxJS</title>
      <link>https://juristr.com/blog/2018/10/journey-promises-to-rxjs/</link>
      <pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://juristr.com/blog/2018/10/journey-promises-to-rxjs/</guid>
      <description>In this post I’m going to tell you, step-by-step, how I used RxJS to refactor a method that was based on Promises.     (adsbygoogle = window.</description>
    </item>
    
  </channel>
</rss>